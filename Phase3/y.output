Grammar

    0 $accept: prog_start $end

    1 prog_start: %empty
    2           | functions

    3 functions: function
    4          | function functions

    5 function: FUNCTION IDENTIFIER L_PAREN arguments R_PAREN L_CURLY statements R_CURLY

    6 arguments: argument
    7          | argument COMMA arguments

    8 argument: %empty
    9         | INTEGER IDENTIFIER

   10 statements: %empty
   11           | statement SEMICOLON statements
   12           | statement_p statements

   13 statement_p: s_if
   14            | s_while

   15 statement: declaration
   16          | s_var
   17          | READ L_PAREN var R_PAREN
   18          | WRITE L_PAREN expression R_PAREN
   19          | RETURN expression

   20 s_var: var EQUALS expression

   21 s_if: IF L_PAREN neg expression_bool R_PAREN L_CURLY statements R_CURLY
   22     | IF L_PAREN neg expression_bool R_PAREN L_CURLY statements R_CURLY IFELSE neg L_CURLY statements R_CURLY
   23     | IF L_PAREN neg expression_bool R_PAREN L_CURLY statements R_CURLY ELSE L_CURLY statements R_CURLY

   24 s_while: WHILELOOP L_PAREN neg expression_bool R_PAREN L_CURLY statements R_CURLY

   25 expression: expression addop term
   26           | term

   27 addop: PLUS
   28      | MINUS

   29 term: term mulop factor
   30     | factor

   31 mulop: MULT
   32      | DIV
   33      | MOD

   34 factor: func L_PAREN expression R_PAREN
   35       | NUMBER
   36       | var
   37       | NUMBER DECIMAL NUMBER

   38 func: %empty
   39     | IDENTIFIER

   40 expression_bool: expression_bool ne_comp term_bool
   41                | term_bool

   42 ne_comp: ISNOTEQUAL
   43        | LESSTHAN
   44        | GREATERTHAN

   45 term_bool: term_bool e_comp factor_bool
   46          | factor_bool

   47 e_comp: ISEQUAL
   48       | LTEQUAL
   49       | GTEQUAL

   50 factor_bool: L_PAREN expression R_PAREN
   51            | NUMBER
   52            | var

   53 var: IDENTIFIER
   54    | IDENTIFIER L_BRACKET NUMBER R_BRACKET

   55 neg: NOT
   56    | %empty

   57 declaration: INTEGER IDENTIFIER
   58            | INTEGER IDENTIFIER L_BRACKET expression R_BRACKET


Terminals, with rules where they appear

$end (0) 0
error (256)
PLUS (258) 27
MINUS (259) 28
MULT (260) 31
MOD (261) 33
DIV (262) 32
EQUALS (263) 20
LESSTHAN (264) 43
GREATERTHAN (265) 44
ISEQUAL (266) 47
ISNOTEQUAL (267) 42
GTEQUAL (268) 49
LTEQUAL (269) 48
NOT (270) 55
SEMICOLON (271) 11
L_PAREN (272) 5 17 18 21 22 23 24 34 50
R_PAREN (273) 5 17 18 21 22 23 24 34 50
L_CURLY (274) 5 21 22 23 24
R_CURLY (275) 5 21 22 23 24
L_BRACKET (276) 54 58
R_BRACKET (277) 54 58
COMMA (278) 7
DECIMAL (279) 37
READ (280) 17
WRITE (281) 18
IF (282) 21 22 23
IFELSE (283) 22
ELSE (284) 23
WHILELOOP (285) 24
INTEGER (286) 9 57 58
FUNCTION (287) 5
RETURN (288) 19
IDENTIFIER (289) 5 9 39 53 54 57 58
NUMBER (290) 35 37 51 54


Nonterminals, with rules where they appear

$accept (36)
    on left: 0
prog_start (37)
    on left: 1 2, on right: 0
functions (38)
    on left: 3 4, on right: 2 4
function (39)
    on left: 5, on right: 3 4
arguments (40)
    on left: 6 7, on right: 5 7
argument (41)
    on left: 8 9, on right: 6 7
statements (42)
    on left: 10 11 12, on right: 5 11 12 21 22 23 24
statement_p (43)
    on left: 13 14, on right: 12
statement (44)
    on left: 15 16 17 18 19, on right: 11
s_var (45)
    on left: 20, on right: 16
s_if (46)
    on left: 21 22 23, on right: 13
s_while (47)
    on left: 24, on right: 14
expression (48)
    on left: 25 26, on right: 18 19 20 25 34 50 58
addop (49)
    on left: 27 28, on right: 25
term (50)
    on left: 29 30, on right: 25 26 29
mulop (51)
    on left: 31 32 33, on right: 29
factor (52)
    on left: 34 35 36 37, on right: 29 30
func (53)
    on left: 38 39, on right: 34
expression_bool (54)
    on left: 40 41, on right: 21 22 23 24 40
ne_comp (55)
    on left: 42 43 44, on right: 40
term_bool (56)
    on left: 45 46, on right: 40 41 45
e_comp (57)
    on left: 47 48 49, on right: 45
factor_bool (58)
    on left: 50 51 52, on right: 45 46
var (59)
    on left: 53 54, on right: 17 20 36 52
neg (60)
    on left: 55 56, on right: 21 22 23 24
declaration (61)
    on left: 57 58, on right: 15


State 0

    0 $accept: . prog_start $end

    FUNCTION  shift, and go to state 1

    $default  reduce using rule 1 (prog_start)

    prog_start  go to state 2
    functions   go to state 3
    function    go to state 4


State 1

    5 function: FUNCTION . IDENTIFIER L_PAREN arguments R_PAREN L_CURLY statements R_CURLY

    IDENTIFIER  shift, and go to state 5


State 2

    0 $accept: prog_start . $end

    $end  shift, and go to state 6


State 3

    2 prog_start: functions .

    $default  reduce using rule 2 (prog_start)


State 4

    3 functions: function .
    4          | function . functions

    FUNCTION  shift, and go to state 1

    $default  reduce using rule 3 (functions)

    functions  go to state 7
    function   go to state 4


State 5

    5 function: FUNCTION IDENTIFIER . L_PAREN arguments R_PAREN L_CURLY statements R_CURLY

    L_PAREN  shift, and go to state 8


State 6

    0 $accept: prog_start $end .

    $default  accept


State 7

    4 functions: function functions .

    $default  reduce using rule 4 (functions)


State 8

    5 function: FUNCTION IDENTIFIER L_PAREN . arguments R_PAREN L_CURLY statements R_CURLY

    INTEGER  shift, and go to state 9

    $default  reduce using rule 8 (argument)

    arguments  go to state 10
    argument   go to state 11


State 9

    9 argument: INTEGER . IDENTIFIER

    IDENTIFIER  shift, and go to state 12


State 10

    5 function: FUNCTION IDENTIFIER L_PAREN arguments . R_PAREN L_CURLY statements R_CURLY

    R_PAREN  shift, and go to state 13


State 11

    6 arguments: argument .
    7          | argument . COMMA arguments

    COMMA  shift, and go to state 14

    $default  reduce using rule 6 (arguments)


State 12

    9 argument: INTEGER IDENTIFIER .

    $default  reduce using rule 9 (argument)


State 13

    5 function: FUNCTION IDENTIFIER L_PAREN arguments R_PAREN . L_CURLY statements R_CURLY

    L_CURLY  shift, and go to state 15


State 14

    7 arguments: argument COMMA . arguments

    INTEGER  shift, and go to state 9

    $default  reduce using rule 8 (argument)

    arguments  go to state 16
    argument   go to state 11


State 15

    5 function: FUNCTION IDENTIFIER L_PAREN arguments R_PAREN L_CURLY . statements R_CURLY

    READ        shift, and go to state 17
    WRITE       shift, and go to state 18
    IF          shift, and go to state 19
    WHILELOOP   shift, and go to state 20
    INTEGER     shift, and go to state 21
    RETURN      shift, and go to state 22
    IDENTIFIER  shift, and go to state 23

    $default  reduce using rule 10 (statements)

    statements   go to state 24
    statement_p  go to state 25
    statement    go to state 26
    s_var        go to state 27
    s_if         go to state 28
    s_while      go to state 29
    var          go to state 30
    declaration  go to state 31


State 16

    7 arguments: argument COMMA arguments .

    $default  reduce using rule 7 (arguments)


State 17

   17 statement: READ . L_PAREN var R_PAREN

    L_PAREN  shift, and go to state 32


State 18

   18 statement: WRITE . L_PAREN expression R_PAREN

    L_PAREN  shift, and go to state 33


State 19

   21 s_if: IF . L_PAREN neg expression_bool R_PAREN L_CURLY statements R_CURLY
   22     | IF . L_PAREN neg expression_bool R_PAREN L_CURLY statements R_CURLY IFELSE neg L_CURLY statements R_CURLY
   23     | IF . L_PAREN neg expression_bool R_PAREN L_CURLY statements R_CURLY ELSE L_CURLY statements R_CURLY

    L_PAREN  shift, and go to state 34


State 20

   24 s_while: WHILELOOP . L_PAREN neg expression_bool R_PAREN L_CURLY statements R_CURLY

    L_PAREN  shift, and go to state 35


State 21

   57 declaration: INTEGER . IDENTIFIER
   58            | INTEGER . IDENTIFIER L_BRACKET expression R_BRACKET

    IDENTIFIER  shift, and go to state 36


State 22

   19 statement: RETURN . expression

    IDENTIFIER  shift, and go to state 37
    NUMBER      shift, and go to state 38

    $default  reduce using rule 38 (func)

    expression  go to state 39
    term        go to state 40
    factor      go to state 41
    func        go to state 42
    var         go to state 43


State 23

   53 var: IDENTIFIER .
   54    | IDENTIFIER . L_BRACKET NUMBER R_BRACKET

    L_BRACKET  shift, and go to state 44

    $default  reduce using rule 53 (var)


State 24

    5 function: FUNCTION IDENTIFIER L_PAREN arguments R_PAREN L_CURLY statements . R_CURLY

    R_CURLY  shift, and go to state 45


State 25

   12 statements: statement_p . statements

    READ        shift, and go to state 17
    WRITE       shift, and go to state 18
    IF          shift, and go to state 19
    WHILELOOP   shift, and go to state 20
    INTEGER     shift, and go to state 21
    RETURN      shift, and go to state 22
    IDENTIFIER  shift, and go to state 23

    $default  reduce using rule 10 (statements)

    statements   go to state 46
    statement_p  go to state 25
    statement    go to state 26
    s_var        go to state 27
    s_if         go to state 28
    s_while      go to state 29
    var          go to state 30
    declaration  go to state 31


State 26

   11 statements: statement . SEMICOLON statements

    SEMICOLON  shift, and go to state 47


State 27

   16 statement: s_var .

    $default  reduce using rule 16 (statement)


State 28

   13 statement_p: s_if .

    $default  reduce using rule 13 (statement_p)


State 29

   14 statement_p: s_while .

    $default  reduce using rule 14 (statement_p)


State 30

   20 s_var: var . EQUALS expression

    EQUALS  shift, and go to state 48


State 31

   15 statement: declaration .

    $default  reduce using rule 15 (statement)


State 32

   17 statement: READ L_PAREN . var R_PAREN

    IDENTIFIER  shift, and go to state 23

    var  go to state 49


State 33

   18 statement: WRITE L_PAREN . expression R_PAREN

    IDENTIFIER  shift, and go to state 37
    NUMBER      shift, and go to state 38

    $default  reduce using rule 38 (func)

    expression  go to state 50
    term        go to state 40
    factor      go to state 41
    func        go to state 42
    var         go to state 43


State 34

   21 s_if: IF L_PAREN . neg expression_bool R_PAREN L_CURLY statements R_CURLY
   22     | IF L_PAREN . neg expression_bool R_PAREN L_CURLY statements R_CURLY IFELSE neg L_CURLY statements R_CURLY
   23     | IF L_PAREN . neg expression_bool R_PAREN L_CURLY statements R_CURLY ELSE L_CURLY statements R_CURLY

    NOT  shift, and go to state 51

    $default  reduce using rule 56 (neg)

    neg  go to state 52


State 35

   24 s_while: WHILELOOP L_PAREN . neg expression_bool R_PAREN L_CURLY statements R_CURLY

    NOT  shift, and go to state 51

    $default  reduce using rule 56 (neg)

    neg  go to state 53


State 36

   57 declaration: INTEGER IDENTIFIER .
   58            | INTEGER IDENTIFIER . L_BRACKET expression R_BRACKET

    L_BRACKET  shift, and go to state 54

    $default  reduce using rule 57 (declaration)


State 37

   39 func: IDENTIFIER .
   53 var: IDENTIFIER .
   54    | IDENTIFIER . L_BRACKET NUMBER R_BRACKET

    L_BRACKET  shift, and go to state 44

    L_PAREN   reduce using rule 39 (func)
    $default  reduce using rule 53 (var)


State 38

   35 factor: NUMBER .
   37       | NUMBER . DECIMAL NUMBER

    DECIMAL  shift, and go to state 55

    $default  reduce using rule 35 (factor)


State 39

   19 statement: RETURN expression .
   25 expression: expression . addop term

    PLUS   shift, and go to state 56
    MINUS  shift, and go to state 57

    $default  reduce using rule 19 (statement)

    addop  go to state 58


State 40

   26 expression: term .
   29 term: term . mulop factor

    MULT  shift, and go to state 59
    MOD   shift, and go to state 60
    DIV   shift, and go to state 61

    $default  reduce using rule 26 (expression)

    mulop  go to state 62


State 41

   30 term: factor .

    $default  reduce using rule 30 (term)


State 42

   34 factor: func . L_PAREN expression R_PAREN

    L_PAREN  shift, and go to state 63


State 43

   36 factor: var .

    $default  reduce using rule 36 (factor)


State 44

   54 var: IDENTIFIER L_BRACKET . NUMBER R_BRACKET

    NUMBER  shift, and go to state 64


State 45

    5 function: FUNCTION IDENTIFIER L_PAREN arguments R_PAREN L_CURLY statements R_CURLY .

    $default  reduce using rule 5 (function)


State 46

   12 statements: statement_p statements .

    $default  reduce using rule 12 (statements)


State 47

   11 statements: statement SEMICOLON . statements

    READ        shift, and go to state 17
    WRITE       shift, and go to state 18
    IF          shift, and go to state 19
    WHILELOOP   shift, and go to state 20
    INTEGER     shift, and go to state 21
    RETURN      shift, and go to state 22
    IDENTIFIER  shift, and go to state 23

    $default  reduce using rule 10 (statements)

    statements   go to state 65
    statement_p  go to state 25
    statement    go to state 26
    s_var        go to state 27
    s_if         go to state 28
    s_while      go to state 29
    var          go to state 30
    declaration  go to state 31


State 48

   20 s_var: var EQUALS . expression

    IDENTIFIER  shift, and go to state 37
    NUMBER      shift, and go to state 38

    $default  reduce using rule 38 (func)

    expression  go to state 66
    term        go to state 40
    factor      go to state 41
    func        go to state 42
    var         go to state 43


State 49

   17 statement: READ L_PAREN var . R_PAREN

    R_PAREN  shift, and go to state 67


State 50

   18 statement: WRITE L_PAREN expression . R_PAREN
   25 expression: expression . addop term

    PLUS     shift, and go to state 56
    MINUS    shift, and go to state 57
    R_PAREN  shift, and go to state 68

    addop  go to state 58


State 51

   55 neg: NOT .

    $default  reduce using rule 55 (neg)


State 52

   21 s_if: IF L_PAREN neg . expression_bool R_PAREN L_CURLY statements R_CURLY
   22     | IF L_PAREN neg . expression_bool R_PAREN L_CURLY statements R_CURLY IFELSE neg L_CURLY statements R_CURLY
   23     | IF L_PAREN neg . expression_bool R_PAREN L_CURLY statements R_CURLY ELSE L_CURLY statements R_CURLY

    L_PAREN     shift, and go to state 69
    IDENTIFIER  shift, and go to state 23
    NUMBER      shift, and go to state 70

    expression_bool  go to state 71
    term_bool        go to state 72
    factor_bool      go to state 73
    var              go to state 74


State 53

   24 s_while: WHILELOOP L_PAREN neg . expression_bool R_PAREN L_CURLY statements R_CURLY

    L_PAREN     shift, and go to state 69
    IDENTIFIER  shift, and go to state 23
    NUMBER      shift, and go to state 70

    expression_bool  go to state 75
    term_bool        go to state 72
    factor_bool      go to state 73
    var              go to state 74


State 54

   58 declaration: INTEGER IDENTIFIER L_BRACKET . expression R_BRACKET

    IDENTIFIER  shift, and go to state 37
    NUMBER      shift, and go to state 38

    $default  reduce using rule 38 (func)

    expression  go to state 76
    term        go to state 40
    factor      go to state 41
    func        go to state 42
    var         go to state 43


State 55

   37 factor: NUMBER DECIMAL . NUMBER

    NUMBER  shift, and go to state 77


State 56

   27 addop: PLUS .

    $default  reduce using rule 27 (addop)


State 57

   28 addop: MINUS .

    $default  reduce using rule 28 (addop)


State 58

   25 expression: expression addop . term

    IDENTIFIER  shift, and go to state 37
    NUMBER      shift, and go to state 38

    $default  reduce using rule 38 (func)

    term    go to state 78
    factor  go to state 41
    func    go to state 42
    var     go to state 43


State 59

   31 mulop: MULT .

    $default  reduce using rule 31 (mulop)


State 60

   33 mulop: MOD .

    $default  reduce using rule 33 (mulop)


State 61

   32 mulop: DIV .

    $default  reduce using rule 32 (mulop)


State 62

   29 term: term mulop . factor

    IDENTIFIER  shift, and go to state 37
    NUMBER      shift, and go to state 38

    $default  reduce using rule 38 (func)

    factor  go to state 79
    func    go to state 42
    var     go to state 43


State 63

   34 factor: func L_PAREN . expression R_PAREN

    IDENTIFIER  shift, and go to state 37
    NUMBER      shift, and go to state 38

    $default  reduce using rule 38 (func)

    expression  go to state 80
    term        go to state 40
    factor      go to state 41
    func        go to state 42
    var         go to state 43


State 64

   54 var: IDENTIFIER L_BRACKET NUMBER . R_BRACKET

    R_BRACKET  shift, and go to state 81


State 65

   11 statements: statement SEMICOLON statements .

    $default  reduce using rule 11 (statements)


State 66

   20 s_var: var EQUALS expression .
   25 expression: expression . addop term

    PLUS   shift, and go to state 56
    MINUS  shift, and go to state 57

    $default  reduce using rule 20 (s_var)

    addop  go to state 58


State 67

   17 statement: READ L_PAREN var R_PAREN .

    $default  reduce using rule 17 (statement)


State 68

   18 statement: WRITE L_PAREN expression R_PAREN .

    $default  reduce using rule 18 (statement)


State 69

   50 factor_bool: L_PAREN . expression R_PAREN

    IDENTIFIER  shift, and go to state 37
    NUMBER      shift, and go to state 38

    $default  reduce using rule 38 (func)

    expression  go to state 82
    term        go to state 40
    factor      go to state 41
    func        go to state 42
    var         go to state 43


State 70

   51 factor_bool: NUMBER .

    $default  reduce using rule 51 (factor_bool)


State 71

   21 s_if: IF L_PAREN neg expression_bool . R_PAREN L_CURLY statements R_CURLY
   22     | IF L_PAREN neg expression_bool . R_PAREN L_CURLY statements R_CURLY IFELSE neg L_CURLY statements R_CURLY
   23     | IF L_PAREN neg expression_bool . R_PAREN L_CURLY statements R_CURLY ELSE L_CURLY statements R_CURLY
   40 expression_bool: expression_bool . ne_comp term_bool

    LESSTHAN     shift, and go to state 83
    GREATERTHAN  shift, and go to state 84
    ISNOTEQUAL   shift, and go to state 85
    R_PAREN      shift, and go to state 86

    ne_comp  go to state 87


State 72

   41 expression_bool: term_bool .
   45 term_bool: term_bool . e_comp factor_bool

    ISEQUAL  shift, and go to state 88
    GTEQUAL  shift, and go to state 89
    LTEQUAL  shift, and go to state 90

    $default  reduce using rule 41 (expression_bool)

    e_comp  go to state 91


State 73

   46 term_bool: factor_bool .

    $default  reduce using rule 46 (term_bool)


State 74

   52 factor_bool: var .

    $default  reduce using rule 52 (factor_bool)


State 75

   24 s_while: WHILELOOP L_PAREN neg expression_bool . R_PAREN L_CURLY statements R_CURLY
   40 expression_bool: expression_bool . ne_comp term_bool

    LESSTHAN     shift, and go to state 83
    GREATERTHAN  shift, and go to state 84
    ISNOTEQUAL   shift, and go to state 85
    R_PAREN      shift, and go to state 92

    ne_comp  go to state 87


State 76

   25 expression: expression . addop term
   58 declaration: INTEGER IDENTIFIER L_BRACKET expression . R_BRACKET

    PLUS       shift, and go to state 56
    MINUS      shift, and go to state 57
    R_BRACKET  shift, and go to state 93

    addop  go to state 58


State 77

   37 factor: NUMBER DECIMAL NUMBER .

    $default  reduce using rule 37 (factor)


State 78

   25 expression: expression addop term .
   29 term: term . mulop factor

    MULT  shift, and go to state 59
    MOD   shift, and go to state 60
    DIV   shift, and go to state 61

    $default  reduce using rule 25 (expression)

    mulop  go to state 62


State 79

   29 term: term mulop factor .

    $default  reduce using rule 29 (term)


State 80

   25 expression: expression . addop term
   34 factor: func L_PAREN expression . R_PAREN

    PLUS     shift, and go to state 56
    MINUS    shift, and go to state 57
    R_PAREN  shift, and go to state 94

    addop  go to state 58


State 81

   54 var: IDENTIFIER L_BRACKET NUMBER R_BRACKET .

    $default  reduce using rule 54 (var)


State 82

   25 expression: expression . addop term
   50 factor_bool: L_PAREN expression . R_PAREN

    PLUS     shift, and go to state 56
    MINUS    shift, and go to state 57
    R_PAREN  shift, and go to state 95

    addop  go to state 58


State 83

   43 ne_comp: LESSTHAN .

    $default  reduce using rule 43 (ne_comp)


State 84

   44 ne_comp: GREATERTHAN .

    $default  reduce using rule 44 (ne_comp)


State 85

   42 ne_comp: ISNOTEQUAL .

    $default  reduce using rule 42 (ne_comp)


State 86

   21 s_if: IF L_PAREN neg expression_bool R_PAREN . L_CURLY statements R_CURLY
   22     | IF L_PAREN neg expression_bool R_PAREN . L_CURLY statements R_CURLY IFELSE neg L_CURLY statements R_CURLY
   23     | IF L_PAREN neg expression_bool R_PAREN . L_CURLY statements R_CURLY ELSE L_CURLY statements R_CURLY

    L_CURLY  shift, and go to state 96


State 87

   40 expression_bool: expression_bool ne_comp . term_bool

    L_PAREN     shift, and go to state 69
    IDENTIFIER  shift, and go to state 23
    NUMBER      shift, and go to state 70

    term_bool    go to state 97
    factor_bool  go to state 73
    var          go to state 74


State 88

   47 e_comp: ISEQUAL .

    $default  reduce using rule 47 (e_comp)


State 89

   49 e_comp: GTEQUAL .

    $default  reduce using rule 49 (e_comp)


State 90

   48 e_comp: LTEQUAL .

    $default  reduce using rule 48 (e_comp)


State 91

   45 term_bool: term_bool e_comp . factor_bool

    L_PAREN     shift, and go to state 69
    IDENTIFIER  shift, and go to state 23
    NUMBER      shift, and go to state 70

    factor_bool  go to state 98
    var          go to state 74


State 92

   24 s_while: WHILELOOP L_PAREN neg expression_bool R_PAREN . L_CURLY statements R_CURLY

    L_CURLY  shift, and go to state 99


State 93

   58 declaration: INTEGER IDENTIFIER L_BRACKET expression R_BRACKET .

    $default  reduce using rule 58 (declaration)


State 94

   34 factor: func L_PAREN expression R_PAREN .

    $default  reduce using rule 34 (factor)


State 95

   50 factor_bool: L_PAREN expression R_PAREN .

    $default  reduce using rule 50 (factor_bool)


State 96

   21 s_if: IF L_PAREN neg expression_bool R_PAREN L_CURLY . statements R_CURLY
   22     | IF L_PAREN neg expression_bool R_PAREN L_CURLY . statements R_CURLY IFELSE neg L_CURLY statements R_CURLY
   23     | IF L_PAREN neg expression_bool R_PAREN L_CURLY . statements R_CURLY ELSE L_CURLY statements R_CURLY

    READ        shift, and go to state 17
    WRITE       shift, and go to state 18
    IF          shift, and go to state 19
    WHILELOOP   shift, and go to state 20
    INTEGER     shift, and go to state 21
    RETURN      shift, and go to state 22
    IDENTIFIER  shift, and go to state 23

    $default  reduce using rule 10 (statements)

    statements   go to state 100
    statement_p  go to state 25
    statement    go to state 26
    s_var        go to state 27
    s_if         go to state 28
    s_while      go to state 29
    var          go to state 30
    declaration  go to state 31


State 97

   40 expression_bool: expression_bool ne_comp term_bool .
   45 term_bool: term_bool . e_comp factor_bool

    ISEQUAL  shift, and go to state 88
    GTEQUAL  shift, and go to state 89
    LTEQUAL  shift, and go to state 90

    $default  reduce using rule 40 (expression_bool)

    e_comp  go to state 91


State 98

   45 term_bool: term_bool e_comp factor_bool .

    $default  reduce using rule 45 (term_bool)


State 99

   24 s_while: WHILELOOP L_PAREN neg expression_bool R_PAREN L_CURLY . statements R_CURLY

    READ        shift, and go to state 17
    WRITE       shift, and go to state 18
    IF          shift, and go to state 19
    WHILELOOP   shift, and go to state 20
    INTEGER     shift, and go to state 21
    RETURN      shift, and go to state 22
    IDENTIFIER  shift, and go to state 23

    $default  reduce using rule 10 (statements)

    statements   go to state 101
    statement_p  go to state 25
    statement    go to state 26
    s_var        go to state 27
    s_if         go to state 28
    s_while      go to state 29
    var          go to state 30
    declaration  go to state 31


State 100

   21 s_if: IF L_PAREN neg expression_bool R_PAREN L_CURLY statements . R_CURLY
   22     | IF L_PAREN neg expression_bool R_PAREN L_CURLY statements . R_CURLY IFELSE neg L_CURLY statements R_CURLY
   23     | IF L_PAREN neg expression_bool R_PAREN L_CURLY statements . R_CURLY ELSE L_CURLY statements R_CURLY

    R_CURLY  shift, and go to state 102


State 101

   24 s_while: WHILELOOP L_PAREN neg expression_bool R_PAREN L_CURLY statements . R_CURLY

    R_CURLY  shift, and go to state 103


State 102

   21 s_if: IF L_PAREN neg expression_bool R_PAREN L_CURLY statements R_CURLY .
   22     | IF L_PAREN neg expression_bool R_PAREN L_CURLY statements R_CURLY . IFELSE neg L_CURLY statements R_CURLY
   23     | IF L_PAREN neg expression_bool R_PAREN L_CURLY statements R_CURLY . ELSE L_CURLY statements R_CURLY

    IFELSE  shift, and go to state 104
    ELSE    shift, and go to state 105

    $default  reduce using rule 21 (s_if)


State 103

   24 s_while: WHILELOOP L_PAREN neg expression_bool R_PAREN L_CURLY statements R_CURLY .

    $default  reduce using rule 24 (s_while)


State 104

   22 s_if: IF L_PAREN neg expression_bool R_PAREN L_CURLY statements R_CURLY IFELSE . neg L_CURLY statements R_CURLY

    NOT  shift, and go to state 51

    $default  reduce using rule 56 (neg)

    neg  go to state 106


State 105

   23 s_if: IF L_PAREN neg expression_bool R_PAREN L_CURLY statements R_CURLY ELSE . L_CURLY statements R_CURLY

    L_CURLY  shift, and go to state 107


State 106

   22 s_if: IF L_PAREN neg expression_bool R_PAREN L_CURLY statements R_CURLY IFELSE neg . L_CURLY statements R_CURLY

    L_CURLY  shift, and go to state 108


State 107

   23 s_if: IF L_PAREN neg expression_bool R_PAREN L_CURLY statements R_CURLY ELSE L_CURLY . statements R_CURLY

    READ        shift, and go to state 17
    WRITE       shift, and go to state 18
    IF          shift, and go to state 19
    WHILELOOP   shift, and go to state 20
    INTEGER     shift, and go to state 21
    RETURN      shift, and go to state 22
    IDENTIFIER  shift, and go to state 23

    $default  reduce using rule 10 (statements)

    statements   go to state 109
    statement_p  go to state 25
    statement    go to state 26
    s_var        go to state 27
    s_if         go to state 28
    s_while      go to state 29
    var          go to state 30
    declaration  go to state 31


State 108

   22 s_if: IF L_PAREN neg expression_bool R_PAREN L_CURLY statements R_CURLY IFELSE neg L_CURLY . statements R_CURLY

    READ        shift, and go to state 17
    WRITE       shift, and go to state 18
    IF          shift, and go to state 19
    WHILELOOP   shift, and go to state 20
    INTEGER     shift, and go to state 21
    RETURN      shift, and go to state 22
    IDENTIFIER  shift, and go to state 23

    $default  reduce using rule 10 (statements)

    statements   go to state 110
    statement_p  go to state 25
    statement    go to state 26
    s_var        go to state 27
    s_if         go to state 28
    s_while      go to state 29
    var          go to state 30
    declaration  go to state 31


State 109

   23 s_if: IF L_PAREN neg expression_bool R_PAREN L_CURLY statements R_CURLY ELSE L_CURLY statements . R_CURLY

    R_CURLY  shift, and go to state 111


State 110

   22 s_if: IF L_PAREN neg expression_bool R_PAREN L_CURLY statements R_CURLY IFELSE neg L_CURLY statements . R_CURLY

    R_CURLY  shift, and go to state 112


State 111

   23 s_if: IF L_PAREN neg expression_bool R_PAREN L_CURLY statements R_CURLY ELSE L_CURLY statements R_CURLY .

    $default  reduce using rule 23 (s_if)


State 112

   22 s_if: IF L_PAREN neg expression_bool R_PAREN L_CURLY statements R_CURLY IFELSE neg L_CURLY statements R_CURLY .

    $default  reduce using rule 22 (s_if)
