Terminals unused in grammar

   DECIMAL


Grammar

    0 $accept: prog_start $end

    1 prog_start: %empty
    2           | functions

    3 functions: function
    4          | function functions

    5 function: FUNCTION IDENTIFIER L_PAREN arguments R_PAREN L_CURLY statements R_CURLY

    6 arguments: argument
    7          | argument COMMA arguments

    8 argument: %empty
    9         | IDENTIFIER

   10 statements: declaration
   11           | statement SEMICOLON statements

   12 statement: s_var
   13          | s_if
   14          | s_while
   15          | READ L_PAREN var R_PAREN
   16          | WRITE L_PAREN var R_PAREN
   17          | RETURN expression

   18 s_var: var EQUALS expression

   19 s_if: IF bool_exp L_CURLY statement R_CURLY
   20     | IF bool_exp L_CURLY statement R_CURLY IFELSE bool_exp L_CURLY statement R_CURLY
   21     | IF bool_exp L_CURLY statement R_CURLY ELSE L_CURLY statement R_CURLY

   22 s_while: WHILELOOP bool_exp L_CURLY statement R_CURLY

   23 expression: mulop
   24           | mulop PLUS mulop
   25           | mulop MINUS mulop

   26 mulop: term
   27      | term MULT term
   28      | term DIV term
   29      | term MOD term

   30 term: var
   31     | INTEGER
   32     | L_PAREN expression R_PAREN
   33     | IDENTIFIER L_PAREN expression expression_loop R_PAREN

   34 expression_loop: %empty
   35                | COMMA expression expression_loop

   36 var: IDENTIFIER
   37    | IDENTIFIER L_BRACKET expression R_BRACKET

   38 bool_exp: bool_exp_p expression comp expression

   39 bool_exp_p: NOT
   40           | %empty

   41 comp: ISEQUAL
   42     | ISNOTEQUAL
   43     | LESSTHAN
   44     | GREATERTHAN
   45     | LTEQUAL
   46     | GTEQUAL

   47 declaration: INTEGER IDENTIFIER
   48            | INTEGER IDENTIFIER L_BRACKET arr_dec R_BRACKET

   49 arr_dec: NUMBER
   50        | expression


Terminals, with rules where they appear

$end (0) 0
error (256)
PLUS (258) 24
MINUS (259) 25
MULT (260) 27
MOD (261) 29
DIV (262) 28
EQUALS (263) 18
LESSTHAN (264) 43
GREATERTHAN (265) 44
ISEQUAL (266) 41
ISNOTEQUAL (267) 42
GTEQUAL (268) 46
LTEQUAL (269) 45
NOT (270) 39
SEMICOLON (271) 11
L_PAREN (272) 5 15 16 32 33
R_PAREN (273) 5 15 16 32 33
L_CURLY (274) 5 19 20 21 22
R_CURLY (275) 5 19 20 21 22
L_BRACKET (276) 37 48
R_BRACKET (277) 37 48
COMMA (278) 7 35
DECIMAL (279)
READ (280) 15
WRITE (281) 16
IF (282) 19 20 21
IFELSE (283) 20
ELSE (284) 21
WHILELOOP (285) 22
INTEGER (286) 31 47 48
NUMBER (287) 49
FUNCTION (288) 5
RETURN (289) 17
IDENTIFIER (290) 5 9 33 36 37 47 48


Nonterminals, with rules where they appear

$accept (36)
    on left: 0
prog_start (37)
    on left: 1 2, on right: 0
functions (38)
    on left: 3 4, on right: 2 4
function (39)
    on left: 5, on right: 3 4
arguments (40)
    on left: 6 7, on right: 5 7
argument (41)
    on left: 8 9, on right: 6 7
statements (42)
    on left: 10 11, on right: 5 11
statement (43)
    on left: 12 13 14 15 16 17, on right: 11 19 20 21 22
s_var (44)
    on left: 18, on right: 12
s_if (45)
    on left: 19 20 21, on right: 13
s_while (46)
    on left: 22, on right: 14
expression (47)
    on left: 23 24 25, on right: 17 18 32 33 35 37 38 50
mulop (48)
    on left: 26 27 28 29, on right: 23 24 25
term (49)
    on left: 30 31 32 33, on right: 26 27 28 29
expression_loop (50)
    on left: 34 35, on right: 33 35
var (51)
    on left: 36 37, on right: 15 16 18 30
bool_exp (52)
    on left: 38, on right: 19 20 21 22
bool_exp_p (53)
    on left: 39 40, on right: 38
comp (54)
    on left: 41 42 43 44 45 46, on right: 38
declaration (55)
    on left: 47 48, on right: 10
arr_dec (56)
    on left: 49 50, on right: 48


State 0

    0 $accept: . prog_start $end

    FUNCTION  shift, and go to state 1

    $default  reduce using rule 1 (prog_start)

    prog_start  go to state 2
    functions   go to state 3
    function    go to state 4


State 1

    5 function: FUNCTION . IDENTIFIER L_PAREN arguments R_PAREN L_CURLY statements R_CURLY

    IDENTIFIER  shift, and go to state 5


State 2

    0 $accept: prog_start . $end

    $end  shift, and go to state 6


State 3

    2 prog_start: functions .

    $default  reduce using rule 2 (prog_start)


State 4

    3 functions: function .
    4          | function . functions

    FUNCTION  shift, and go to state 1

    $default  reduce using rule 3 (functions)

    functions  go to state 7
    function   go to state 4


State 5

    5 function: FUNCTION IDENTIFIER . L_PAREN arguments R_PAREN L_CURLY statements R_CURLY

    L_PAREN  shift, and go to state 8


State 6

    0 $accept: prog_start $end .

    $default  accept


State 7

    4 functions: function functions .

    $default  reduce using rule 4 (functions)


State 8

    5 function: FUNCTION IDENTIFIER L_PAREN . arguments R_PAREN L_CURLY statements R_CURLY

    IDENTIFIER  shift, and go to state 9

    $default  reduce using rule 8 (argument)

    arguments  go to state 10
    argument   go to state 11


State 9

    9 argument: IDENTIFIER .

    $default  reduce using rule 9 (argument)


State 10

    5 function: FUNCTION IDENTIFIER L_PAREN arguments . R_PAREN L_CURLY statements R_CURLY

    R_PAREN  shift, and go to state 12


State 11

    6 arguments: argument .
    7          | argument . COMMA arguments

    COMMA  shift, and go to state 13

    $default  reduce using rule 6 (arguments)


State 12

    5 function: FUNCTION IDENTIFIER L_PAREN arguments R_PAREN . L_CURLY statements R_CURLY

    L_CURLY  shift, and go to state 14


State 13

    7 arguments: argument COMMA . arguments

    IDENTIFIER  shift, and go to state 9

    $default  reduce using rule 8 (argument)

    arguments  go to state 15
    argument   go to state 11


State 14

    5 function: FUNCTION IDENTIFIER L_PAREN arguments R_PAREN L_CURLY . statements R_CURLY

    READ        shift, and go to state 16
    WRITE       shift, and go to state 17
    IF          shift, and go to state 18
    WHILELOOP   shift, and go to state 19
    INTEGER     shift, and go to state 20
    RETURN      shift, and go to state 21
    IDENTIFIER  shift, and go to state 22

    statements   go to state 23
    statement    go to state 24
    s_var        go to state 25
    s_if         go to state 26
    s_while      go to state 27
    var          go to state 28
    declaration  go to state 29


State 15

    7 arguments: argument COMMA arguments .

    $default  reduce using rule 7 (arguments)


State 16

   15 statement: READ . L_PAREN var R_PAREN

    L_PAREN  shift, and go to state 30


State 17

   16 statement: WRITE . L_PAREN var R_PAREN

    L_PAREN  shift, and go to state 31


State 18

   19 s_if: IF . bool_exp L_CURLY statement R_CURLY
   20     | IF . bool_exp L_CURLY statement R_CURLY IFELSE bool_exp L_CURLY statement R_CURLY
   21     | IF . bool_exp L_CURLY statement R_CURLY ELSE L_CURLY statement R_CURLY

    NOT  shift, and go to state 32

    $default  reduce using rule 40 (bool_exp_p)

    bool_exp    go to state 33
    bool_exp_p  go to state 34


State 19

   22 s_while: WHILELOOP . bool_exp L_CURLY statement R_CURLY

    NOT  shift, and go to state 32

    $default  reduce using rule 40 (bool_exp_p)

    bool_exp    go to state 35
    bool_exp_p  go to state 34


State 20

   47 declaration: INTEGER . IDENTIFIER
   48            | INTEGER . IDENTIFIER L_BRACKET arr_dec R_BRACKET

    IDENTIFIER  shift, and go to state 36


State 21

   17 statement: RETURN . expression

    L_PAREN     shift, and go to state 37
    INTEGER     shift, and go to state 38
    IDENTIFIER  shift, and go to state 39

    expression  go to state 40
    mulop       go to state 41
    term        go to state 42
    var         go to state 43


State 22

   36 var: IDENTIFIER .
   37    | IDENTIFIER . L_BRACKET expression R_BRACKET

    L_BRACKET  shift, and go to state 44

    $default  reduce using rule 36 (var)


State 23

    5 function: FUNCTION IDENTIFIER L_PAREN arguments R_PAREN L_CURLY statements . R_CURLY

    R_CURLY  shift, and go to state 45


State 24

   11 statements: statement . SEMICOLON statements

    SEMICOLON  shift, and go to state 46


State 25

   12 statement: s_var .

    $default  reduce using rule 12 (statement)


State 26

   13 statement: s_if .

    $default  reduce using rule 13 (statement)


State 27

   14 statement: s_while .

    $default  reduce using rule 14 (statement)


State 28

   18 s_var: var . EQUALS expression

    EQUALS  shift, and go to state 47


State 29

   10 statements: declaration .

    $default  reduce using rule 10 (statements)


State 30

   15 statement: READ L_PAREN . var R_PAREN

    IDENTIFIER  shift, and go to state 22

    var  go to state 48


State 31

   16 statement: WRITE L_PAREN . var R_PAREN

    IDENTIFIER  shift, and go to state 22

    var  go to state 49


State 32

   39 bool_exp_p: NOT .

    $default  reduce using rule 39 (bool_exp_p)


State 33

   19 s_if: IF bool_exp . L_CURLY statement R_CURLY
   20     | IF bool_exp . L_CURLY statement R_CURLY IFELSE bool_exp L_CURLY statement R_CURLY
   21     | IF bool_exp . L_CURLY statement R_CURLY ELSE L_CURLY statement R_CURLY

    L_CURLY  shift, and go to state 50


State 34

   38 bool_exp: bool_exp_p . expression comp expression

    L_PAREN     shift, and go to state 37
    INTEGER     shift, and go to state 38
    IDENTIFIER  shift, and go to state 39

    expression  go to state 51
    mulop       go to state 41
    term        go to state 42
    var         go to state 43


State 35

   22 s_while: WHILELOOP bool_exp . L_CURLY statement R_CURLY

    L_CURLY  shift, and go to state 52


State 36

   47 declaration: INTEGER IDENTIFIER .
   48            | INTEGER IDENTIFIER . L_BRACKET arr_dec R_BRACKET

    L_BRACKET  shift, and go to state 53

    $default  reduce using rule 47 (declaration)


State 37

   32 term: L_PAREN . expression R_PAREN

    L_PAREN     shift, and go to state 37
    INTEGER     shift, and go to state 38
    IDENTIFIER  shift, and go to state 39

    expression  go to state 54
    mulop       go to state 41
    term        go to state 42
    var         go to state 43


State 38

   31 term: INTEGER .

    $default  reduce using rule 31 (term)


State 39

   33 term: IDENTIFIER . L_PAREN expression expression_loop R_PAREN
   36 var: IDENTIFIER .
   37    | IDENTIFIER . L_BRACKET expression R_BRACKET

    L_PAREN    shift, and go to state 55
    L_BRACKET  shift, and go to state 44

    $default  reduce using rule 36 (var)


State 40

   17 statement: RETURN expression .

    $default  reduce using rule 17 (statement)


State 41

   23 expression: mulop .
   24           | mulop . PLUS mulop
   25           | mulop . MINUS mulop

    PLUS   shift, and go to state 56
    MINUS  shift, and go to state 57

    $default  reduce using rule 23 (expression)


State 42

   26 mulop: term .
   27      | term . MULT term
   28      | term . DIV term
   29      | term . MOD term

    MULT  shift, and go to state 58
    MOD   shift, and go to state 59
    DIV   shift, and go to state 60

    $default  reduce using rule 26 (mulop)


State 43

   30 term: var .

    $default  reduce using rule 30 (term)


State 44

   37 var: IDENTIFIER L_BRACKET . expression R_BRACKET

    L_PAREN     shift, and go to state 37
    INTEGER     shift, and go to state 38
    IDENTIFIER  shift, and go to state 39

    expression  go to state 61
    mulop       go to state 41
    term        go to state 42
    var         go to state 43


State 45

    5 function: FUNCTION IDENTIFIER L_PAREN arguments R_PAREN L_CURLY statements R_CURLY .

    $default  reduce using rule 5 (function)


State 46

   11 statements: statement SEMICOLON . statements

    READ        shift, and go to state 16
    WRITE       shift, and go to state 17
    IF          shift, and go to state 18
    WHILELOOP   shift, and go to state 19
    INTEGER     shift, and go to state 20
    RETURN      shift, and go to state 21
    IDENTIFIER  shift, and go to state 22

    statements   go to state 62
    statement    go to state 24
    s_var        go to state 25
    s_if         go to state 26
    s_while      go to state 27
    var          go to state 28
    declaration  go to state 29


State 47

   18 s_var: var EQUALS . expression

    L_PAREN     shift, and go to state 37
    INTEGER     shift, and go to state 38
    IDENTIFIER  shift, and go to state 39

    expression  go to state 63
    mulop       go to state 41
    term        go to state 42
    var         go to state 43


State 48

   15 statement: READ L_PAREN var . R_PAREN

    R_PAREN  shift, and go to state 64


State 49

   16 statement: WRITE L_PAREN var . R_PAREN

    R_PAREN  shift, and go to state 65


State 50

   19 s_if: IF bool_exp L_CURLY . statement R_CURLY
   20     | IF bool_exp L_CURLY . statement R_CURLY IFELSE bool_exp L_CURLY statement R_CURLY
   21     | IF bool_exp L_CURLY . statement R_CURLY ELSE L_CURLY statement R_CURLY

    READ        shift, and go to state 16
    WRITE       shift, and go to state 17
    IF          shift, and go to state 18
    WHILELOOP   shift, and go to state 19
    RETURN      shift, and go to state 21
    IDENTIFIER  shift, and go to state 22

    statement  go to state 66
    s_var      go to state 25
    s_if       go to state 26
    s_while    go to state 27
    var        go to state 28


State 51

   38 bool_exp: bool_exp_p expression . comp expression

    LESSTHAN     shift, and go to state 67
    GREATERTHAN  shift, and go to state 68
    ISEQUAL      shift, and go to state 69
    ISNOTEQUAL   shift, and go to state 70
    GTEQUAL      shift, and go to state 71
    LTEQUAL      shift, and go to state 72

    comp  go to state 73


State 52

   22 s_while: WHILELOOP bool_exp L_CURLY . statement R_CURLY

    READ        shift, and go to state 16
    WRITE       shift, and go to state 17
    IF          shift, and go to state 18
    WHILELOOP   shift, and go to state 19
    RETURN      shift, and go to state 21
    IDENTIFIER  shift, and go to state 22

    statement  go to state 74
    s_var      go to state 25
    s_if       go to state 26
    s_while    go to state 27
    var        go to state 28


State 53

   48 declaration: INTEGER IDENTIFIER L_BRACKET . arr_dec R_BRACKET

    L_PAREN     shift, and go to state 37
    INTEGER     shift, and go to state 38
    NUMBER      shift, and go to state 75
    IDENTIFIER  shift, and go to state 39

    expression  go to state 76
    mulop       go to state 41
    term        go to state 42
    var         go to state 43
    arr_dec     go to state 77


State 54

   32 term: L_PAREN expression . R_PAREN

    R_PAREN  shift, and go to state 78


State 55

   33 term: IDENTIFIER L_PAREN . expression expression_loop R_PAREN

    L_PAREN     shift, and go to state 37
    INTEGER     shift, and go to state 38
    IDENTIFIER  shift, and go to state 39

    expression  go to state 79
    mulop       go to state 41
    term        go to state 42
    var         go to state 43


State 56

   24 expression: mulop PLUS . mulop

    L_PAREN     shift, and go to state 37
    INTEGER     shift, and go to state 38
    IDENTIFIER  shift, and go to state 39

    mulop  go to state 80
    term   go to state 42
    var    go to state 43


State 57

   25 expression: mulop MINUS . mulop

    L_PAREN     shift, and go to state 37
    INTEGER     shift, and go to state 38
    IDENTIFIER  shift, and go to state 39

    mulop  go to state 81
    term   go to state 42
    var    go to state 43


State 58

   27 mulop: term MULT . term

    L_PAREN     shift, and go to state 37
    INTEGER     shift, and go to state 38
    IDENTIFIER  shift, and go to state 39

    term  go to state 82
    var   go to state 43


State 59

   29 mulop: term MOD . term

    L_PAREN     shift, and go to state 37
    INTEGER     shift, and go to state 38
    IDENTIFIER  shift, and go to state 39

    term  go to state 83
    var   go to state 43


State 60

   28 mulop: term DIV . term

    L_PAREN     shift, and go to state 37
    INTEGER     shift, and go to state 38
    IDENTIFIER  shift, and go to state 39

    term  go to state 84
    var   go to state 43


State 61

   37 var: IDENTIFIER L_BRACKET expression . R_BRACKET

    R_BRACKET  shift, and go to state 85


State 62

   11 statements: statement SEMICOLON statements .

    $default  reduce using rule 11 (statements)


State 63

   18 s_var: var EQUALS expression .

    $default  reduce using rule 18 (s_var)


State 64

   15 statement: READ L_PAREN var R_PAREN .

    $default  reduce using rule 15 (statement)


State 65

   16 statement: WRITE L_PAREN var R_PAREN .

    $default  reduce using rule 16 (statement)


State 66

   19 s_if: IF bool_exp L_CURLY statement . R_CURLY
   20     | IF bool_exp L_CURLY statement . R_CURLY IFELSE bool_exp L_CURLY statement R_CURLY
   21     | IF bool_exp L_CURLY statement . R_CURLY ELSE L_CURLY statement R_CURLY

    R_CURLY  shift, and go to state 86


State 67

   43 comp: LESSTHAN .

    $default  reduce using rule 43 (comp)


State 68

   44 comp: GREATERTHAN .

    $default  reduce using rule 44 (comp)


State 69

   41 comp: ISEQUAL .

    $default  reduce using rule 41 (comp)


State 70

   42 comp: ISNOTEQUAL .

    $default  reduce using rule 42 (comp)


State 71

   46 comp: GTEQUAL .

    $default  reduce using rule 46 (comp)


State 72

   45 comp: LTEQUAL .

    $default  reduce using rule 45 (comp)


State 73

   38 bool_exp: bool_exp_p expression comp . expression

    L_PAREN     shift, and go to state 37
    INTEGER     shift, and go to state 38
    IDENTIFIER  shift, and go to state 39

    expression  go to state 87
    mulop       go to state 41
    term        go to state 42
    var         go to state 43


State 74

   22 s_while: WHILELOOP bool_exp L_CURLY statement . R_CURLY

    R_CURLY  shift, and go to state 88


State 75

   49 arr_dec: NUMBER .

    $default  reduce using rule 49 (arr_dec)


State 76

   50 arr_dec: expression .

    $default  reduce using rule 50 (arr_dec)


State 77

   48 declaration: INTEGER IDENTIFIER L_BRACKET arr_dec . R_BRACKET

    R_BRACKET  shift, and go to state 89


State 78

   32 term: L_PAREN expression R_PAREN .

    $default  reduce using rule 32 (term)


State 79

   33 term: IDENTIFIER L_PAREN expression . expression_loop R_PAREN

    COMMA  shift, and go to state 90

    $default  reduce using rule 34 (expression_loop)

    expression_loop  go to state 91


State 80

   24 expression: mulop PLUS mulop .

    $default  reduce using rule 24 (expression)


State 81

   25 expression: mulop MINUS mulop .

    $default  reduce using rule 25 (expression)


State 82

   27 mulop: term MULT term .

    $default  reduce using rule 27 (mulop)


State 83

   29 mulop: term MOD term .

    $default  reduce using rule 29 (mulop)


State 84

   28 mulop: term DIV term .

    $default  reduce using rule 28 (mulop)


State 85

   37 var: IDENTIFIER L_BRACKET expression R_BRACKET .

    $default  reduce using rule 37 (var)


State 86

   19 s_if: IF bool_exp L_CURLY statement R_CURLY .
   20     | IF bool_exp L_CURLY statement R_CURLY . IFELSE bool_exp L_CURLY statement R_CURLY
   21     | IF bool_exp L_CURLY statement R_CURLY . ELSE L_CURLY statement R_CURLY

    IFELSE  shift, and go to state 92
    ELSE    shift, and go to state 93

    $default  reduce using rule 19 (s_if)


State 87

   38 bool_exp: bool_exp_p expression comp expression .

    $default  reduce using rule 38 (bool_exp)


State 88

   22 s_while: WHILELOOP bool_exp L_CURLY statement R_CURLY .

    $default  reduce using rule 22 (s_while)


State 89

   48 declaration: INTEGER IDENTIFIER L_BRACKET arr_dec R_BRACKET .

    $default  reduce using rule 48 (declaration)


State 90

   35 expression_loop: COMMA . expression expression_loop

    L_PAREN     shift, and go to state 37
    INTEGER     shift, and go to state 38
    IDENTIFIER  shift, and go to state 39

    expression  go to state 94
    mulop       go to state 41
    term        go to state 42
    var         go to state 43


State 91

   33 term: IDENTIFIER L_PAREN expression expression_loop . R_PAREN

    R_PAREN  shift, and go to state 95


State 92

   20 s_if: IF bool_exp L_CURLY statement R_CURLY IFELSE . bool_exp L_CURLY statement R_CURLY

    NOT  shift, and go to state 32

    $default  reduce using rule 40 (bool_exp_p)

    bool_exp    go to state 96
    bool_exp_p  go to state 34


State 93

   21 s_if: IF bool_exp L_CURLY statement R_CURLY ELSE . L_CURLY statement R_CURLY

    L_CURLY  shift, and go to state 97


State 94

   35 expression_loop: COMMA expression . expression_loop

    COMMA  shift, and go to state 90

    $default  reduce using rule 34 (expression_loop)

    expression_loop  go to state 98


State 95

   33 term: IDENTIFIER L_PAREN expression expression_loop R_PAREN .

    $default  reduce using rule 33 (term)


State 96

   20 s_if: IF bool_exp L_CURLY statement R_CURLY IFELSE bool_exp . L_CURLY statement R_CURLY

    L_CURLY  shift, and go to state 99


State 97

   21 s_if: IF bool_exp L_CURLY statement R_CURLY ELSE L_CURLY . statement R_CURLY

    READ        shift, and go to state 16
    WRITE       shift, and go to state 17
    IF          shift, and go to state 18
    WHILELOOP   shift, and go to state 19
    RETURN      shift, and go to state 21
    IDENTIFIER  shift, and go to state 22

    statement  go to state 100
    s_var      go to state 25
    s_if       go to state 26
    s_while    go to state 27
    var        go to state 28


State 98

   35 expression_loop: COMMA expression expression_loop .

    $default  reduce using rule 35 (expression_loop)


State 99

   20 s_if: IF bool_exp L_CURLY statement R_CURLY IFELSE bool_exp L_CURLY . statement R_CURLY

    READ        shift, and go to state 16
    WRITE       shift, and go to state 17
    IF          shift, and go to state 18
    WHILELOOP   shift, and go to state 19
    RETURN      shift, and go to state 21
    IDENTIFIER  shift, and go to state 22

    statement  go to state 101
    s_var      go to state 25
    s_if       go to state 26
    s_while    go to state 27
    var        go to state 28


State 100

   21 s_if: IF bool_exp L_CURLY statement R_CURLY ELSE L_CURLY statement . R_CURLY

    R_CURLY  shift, and go to state 102


State 101

   20 s_if: IF bool_exp L_CURLY statement R_CURLY IFELSE bool_exp L_CURLY statement . R_CURLY

    R_CURLY  shift, and go to state 103


State 102

   21 s_if: IF bool_exp L_CURLY statement R_CURLY ELSE L_CURLY statement R_CURLY .

    $default  reduce using rule 21 (s_if)


State 103

   20 s_if: IF bool_exp L_CURLY statement R_CURLY IFELSE bool_exp L_CURLY statement R_CURLY .

    $default  reduce using rule 20 (s_if)
